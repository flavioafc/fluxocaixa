@startuml

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

LAYOUT_TOP_DOWN()

title Arquitetura Geral - Fluxo de Caixa Diário (Dados Sintéticos e Analíticos)

Person(user, "Usuario do Comércio", "Opera no sistema do comercio.")
Person(admin, "Admin do Comércio", "Gerencia os relatórios e monitora o sistema.")
Person(tech_admin, "Administrador Técnico", "Gerencia infraestrutura e monitora falhas.")

Boundary(security_layer, "Camada de Segurança - Firewall e NSG") {
    System_Boundary(system_boundary, "Sistema de Fluxo de Caixa Diário") {
        Container(app_api, "APIControleLancamentos", "API REST (.NET 8)", "Registra lançamentos e publica eventos.")
        ContainerDb(sql_db_sintetico, "Banco Transacional (Lançamentos)", "Azure SQL", "Armazena lançamentos detalhados.")
        
        Container(worker_consolidado, "WorkerConsolidado", "Worker Service (.NET 8)", "Consolida lançamentos e atualiza saldos diários.")
        ContainerDb(sql_db_analitico, "Banco Analítico (Saldos Consolidados)", "Azure SQL", "Armazena saldos consolidados.")
        
        Container(app_reports, "API de Relatórios", "API REST (.NET 8)", "Fornece acesso aos dados consolidados.")
        
        Container(kv, "Azure Key Vault", "Secrets Manager", "Gerencia segredos e chaves de criptografia.")
        ContainerQueue(rabbitmq, "RabbitMQ", "Message Queue", "Mensageria assíncrona entre os serviços.")
        ContainerQueue(dlq, "Dead Letter Queue (DLQ)", "RabbitMQ DLQ", "Mensagens que falharam no processamento.")
        Container(redis_cache, "Redis Cache", "Cache", "Cache distribuído para relatórios frequentes.")
    }
}

Rel(user, app_api, "Registra lançamentos (créditos/débitos)", "HTTPS/REST")
Rel(admin, app_reports, "Consulta relatórios consolidados", "HTTPS/REST")

Rel(app_api, sql_db_sintetico, "Persiste lançamentos", "SQL")
Rel(app_api, rabbitmq, "Publica eventos de novos lançamentos", "AMQP")
Rel(rabbitmq, worker_consolidado, "Consume eventos de lançamentos", "AMQP")
Rel(worker_consolidado, sql_db_analitico, "Atualiza saldo consolidado", "SQL")

Rel(worker_consolidado, dlq, "Envia mensagens com erro", "AMQP")
Rel(dlq, worker_consolidado, "Reprocessa mensagens automaticamente", "AMQP")
Rel(dlq, tech_admin, "Monitoramento e ação manual", "Dashboard de DevOps")

Rel(app_reports, redis_cache, "Consulta cache para dados rápidos", "Redis Protocol")
Rel(app_reports, sql_db_analitico, "Consulta saldos consolidados", "SQL")

Rel(app_api, kv, "Consulta secrets (ex.: strings de conexão)", "HTTPS/REST")
Rel(worker_consolidado, kv, "Consulta secrets (ex.: strings de conexão)", "HTTPS/REST")
Rel(app_reports, kv, "Consulta secrets (ex.: strings de conexão)", "HTTPS/REST")

Boundary(security_boundary, "Segurança e Autenticação") {
    Component(auth, "Autenticação e Autorização", "Azure AD", "Controla acesso às APIs e serviços.")
    Rel(app_api, auth, "Autentica usuários via JWT", "OAuth 2.0")
    Rel(app_reports, auth, "Autentica administradores via JWT", "OAuth 2.0")
}

@enduml
